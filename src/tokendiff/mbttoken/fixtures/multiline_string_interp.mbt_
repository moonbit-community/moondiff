//!build: -w -27
///|
fn template(x : Int, y : Bool, z : String) -> String {
  (
    $| Hello, \{z}
    #| String 1
    #| String 2
    $| \t Goodbye, \{x + 5}
    #| String 3
    $| bool: \{y}
    #| \{not a interpolation}
    #|
  )
}

///|
fn template2() -> String {
  (
    #| line1
    #| line2
    #| line3
    $| interp1 \{'a'} interp2 \{'b'} interp3
    #| line4
    #| line5
    $| interp4 \{'c'} interp5 \{'d'}
    $| interp6 \{'e'} interp7 \{'f'} interp8
    $|
  )
}

///|
fn all_raw_string() -> String {
  (
    #| line1
    #| line2
    #|
    #| line3
    #| line4
    #| line5
  )
}

///|
fn all_raw_string_with_trailing_newline() -> String {
  (
    #| line1
    #| line2
    #| line3
    #| line4
    #| line5
    #|
  )
}

///|
fn all_interp_string() -> String {
  (
    $| interp1 \{'a'} interp2 \{'b'} interp3
    $|
    $| interp4 \{'c'} interp5 \{'d'}
    $| interp6 \{'e'} interp7 \{'f'}
  )
}

///|
fn all_interp_string_with_trailing_newline() -> String {
  (
    $| interp1 \{'a'}\{'b'}\{'c'} interp2 interp3
    $| interp4 \{'c'} interp5 \{'d'}
    $| interp6 \{'e'} interp7 \{'f'}
    $|
  )
}

///|
fn empty_raw_string() -> String {
  (
    #|
  )
}

///|
fn empty_interp_string() -> String {
  (
    $|
  )
}

///| toplevel multiline string without annotation.
/// Typer will infer the type.
let str1 =
  #| Hello,
  #| World.

///|
let str2 =
  $| Hello \{str1},
  #| World.

///|
fn main {
  println(template(1, true, "world"))
  println("---------------------------------------")
  println(template2())
  println("---------------------------------------")
  println(all_raw_string())
  println("---------------------------------------")
  println(all_raw_string_with_trailing_newline())
  println("---------------------------------------")
  println(all_interp_string())
  println("---------------------------------------")
  println(all_interp_string_with_trailing_newline())
  println("---------------------------------------")
  println(empty_raw_string())
  println("---------------------------------------")
  println(empty_interp_string())
}
