// Generated using `moon info`, DON'T EDIT IT
package "myfreess/moondiff/astdiff/elab"

import(
  "myfreess/moondiff/span"
)

// Values

// Errors

// Types and methods
pub enum AtomKind {
  Normal
  String(StringKind)
  Type
  Comment
  Keyword
}

pub enum StringKind {
  StringLiteral
  Text
}

pub enum Syntax {
  Atom(info~ : SyntaxInfo, position~ : Array[@span.SingleLineSpan], content~ : String, kind~ : AtomKind)
  List(info~ : SyntaxInfo, open_position~ : Array[@span.SingleLineSpan], open_content~ : String, children~ : Array[Syntax], close_position~ : Array[@span.SingleLineSpan], close_content~ : String, num_descendants~ : UInt)
}
fn Syntax::atom(content~ : String, position~ : Array[@span.SingleLineSpan], kind~ : AtomKind) -> Self
fn Syntax::comment_positions(ArrayView[Self]) -> Array[@span.SingleLineSpan]
fn Syntax::content_id(Self) -> UInt
fn Syntax::content_is_unique(Self) -> Bool
fn Syntax::id(Self) -> UInt
fn Syntax::info(Self) -> SyntaxInfo
fn Syntax::list(open_content~ : String, open_position~ : Array[@span.SingleLineSpan], children~ : Array[Self], close_content~ : String, close_position~ : Array[@span.SingleLineSpan]) -> Self
fn Syntax::next_sibling(Self) -> Self?
fn Syntax::num_ancestors(Self) -> UInt
fn Syntax::parent(Self) -> Self?
fn Syntax::simple_list(open_position~ : Array[@span.SingleLineSpan], children~ : Array[Self], close_position~ : Array[@span.SingleLineSpan]) -> Self
impl @Yoorkin/prettyprinter.Pretty for Syntax

pub struct SyntaxInfo {
  previous_sibling : Syntax?
  next_sibling : Syntax?
  prev : Syntax?
  parent : Syntax?
  num_ancestors : UInt
  num_after : UInt64
  unique_id : UInt
  content_id : UInt
  content_is_unique : Bool
}
fn SyntaxInfo::new() -> Self
impl Default for SyntaxInfo

// Type aliases

// Traits
trait Elab

